{
	"info": {
		"_postman_id": "a6fcc71e-5e60-412b-ae7f-3a3998a6c011",
		"name": "TICKETGURU",
		"description": "TODO : PATCH ja PUT-pyynt√∂jen korjaus koodissa.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38434098"
	},
	"item": [
		{
			"name": "Orders",
			"item": [
				{
					"name": "Orders Admin",
					"item": [
						{
							"name": "/orders admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(order) {\r",
											"        pm.expect(order).to.have.property('salespersonId');\r",
											"        pm.expect(order).to.have.property('orderDetails');\r",
											"        pm.expect(order).to.have.property('orderId');\r",
											"        pm.expect(order).to.have.property('salespersonFirstName');\r",
											"        pm.expect(order).to.have.property('salespersonLastName');\r",
											"        pm.expect(order).to.have.property('orderDate');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Quantity and unitPrice in orderDetails are non-negative integers\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(order) {\r",
											"        pm.expect(order.orderDetails).to.be.an('array');\r",
											"        order.orderDetails.forEach(function(detail) {\r",
											"            pm.expect(detail.quantity).to.be.a('number').and.to.be.at.least(0);\r",
											"            pm.expect(detail.unitPrice).to.be.a('number').and.to.be.at.least(0);\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"SalespersonFirstName and salespersonLastName should be non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    responseData.forEach(function(order) {\r",
											"        pm.expect(order.salespersonFirstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"SalespersonFirstName should not be empty\");\r",
											"        pm.expect(order.salespersonLastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"SalespersonLastName should not be empty\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/orders",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders admin-unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 for incorrect username/password\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is 'Unauthorized'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message || responseData.error).to.include(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "wrongadmin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/orders",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/orders/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"salespersonId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"eventTicketTypeId\": 1,\r\n      \"quantity\": 2,\r\n      \"unitPrice\": 20.0\r\n    },\r\n    {\r\n      \"eventTicketTypeId\": 2,\r\n      \"quantity\": 1,\r\n      \"unitPrice\": 15.0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body indicates successful deletion\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"salespersonId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"salespersonId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check updated salespersonId\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.salespersonId).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"salespersonId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders Salesperson",
					"item": [
						{
							"name": "/orders salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(order) {\r",
											"        pm.expect(order).to.have.property('salespersonId');\r",
											"        pm.expect(order).to.have.property('orderDetails');\r",
											"        pm.expect(order).to.have.property('orderId');\r",
											"        pm.expect(order).to.have.property('salespersonFirstName');\r",
											"        pm.expect(order).to.have.property('salespersonLastName');\r",
											"        pm.expect(order).to.have.property('orderDate');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Quantity and unitPrice in orderDetails are non-negative integers\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(order) {\r",
											"        pm.expect(order.orderDetails).to.be.an('array');\r",
											"        order.orderDetails.forEach(function(detail) {\r",
											"            pm.expect(detail.quantity).to.be.a('number').and.to.be.at.least(0);\r",
											"            pm.expect(detail.unitPrice).to.be.a('number').and.to.be.at.least(0);\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"SalespersonFirstName and salespersonLastName should be non-empty strings\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"  responseData.forEach(function(order) {\r",
											"    pm.expect(order.salespersonFirstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"SalespersonFirstName should not be empty\");\r",
											"    pm.expect(order.salespersonLastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"SalespersonLastName should not be empty\");\r",
											"  });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/orders",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/orders/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id salesperson-Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 for incorrect username/password\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is 'Unauthorized'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message || responseData.error).to.include(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/orders/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"salespersonId\": 1,\r\n  \"orderDetails\": [\r\n    {\r\n      \"eventTicketTypeId\": 1,\r\n      \"quantity\": 2,\r\n      \"unitPrice\": 20.0\r\n    },\r\n    {\r\n      \"eventTicketTypeId\": 2,\r\n      \"quantity\": 1,\r\n      \"unitPrice\": 15.0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"salespersonId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"salespersonId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/orders/id salesperson-Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 for forbidden access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'forbidden' for forbidden access\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include('Forbidden');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"salespersonId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/orders/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"orders",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Odottaa PUT ja PATCH bugin korjausta"
		},
		{
			"name": "Tickets",
			"item": [
				{
					"name": "Tickets Admin",
					"item": [
						{
							"name": "/tickets admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "/tickets/event/{eventId} admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets/event/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets",
										"event",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/tickets/event/{eventId} admin-Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 for a failed login attempt\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'unauthorized' for a failed login attempt\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include('unauthorized');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets/event/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets",
										"event",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/tickets/order/{orderId} admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets/order/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets",
										"order",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tickets Salesperson",
					"item": [
						{
							"name": "/tickets/event/{eventId} salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets/event/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets",
										"event",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/tickets/order/{orderId}\t salesperson-success Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets/order/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets",
										"order",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/tickets salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "/tickets salesperson-Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 for a failed login attempt\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'unauthorized' for a failed login attempt\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include('unauthorized');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/tickets",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tickets"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Events Admin",
					"item": [
						{
							"name": "/events admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events admin-Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401 for a failed login attempt\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'unauthorized' for a failed login attempt\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include('unauthorized');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events/{eventId} admin-succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events/search admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events/search?=helsinki",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"search"
									],
									"query": [
										{
											"key": "",
											"value": "helsinki"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/events admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"eventName\": \"Concert 1\",\r\n            \"eventDate\": \"2024-10-01T05:08:30.651+00:00\",\r\n            \"eventAddress\": \"Event Address 1\",\r\n            \"eventCity\": \"Helsinki\",\r\n            \"eventDescription\": \"A great concert event\",\r\n            \"eventTicketTypes\": [\r\n                {\r\n                    \"ticketType\": {\r\n                        \"id\": 1,\r\n                        \"name\": \"Aikuinen\"\r\n                    },\r\n                    \"price\": 10,\r\n                    \"ticketsInStock\": 40\r\n                }\r\n            ]\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/events",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"eventName\": \"Concert 1\",\r\n        \"eventDate\": \"2024-10-28T13:02:19.524+00:00\",\r\n        \"eventAddress\": \"Event Address 1\",\r\n        \"eventCity\": \"Helsinki\",\r\n        \"eventDescription\": \"A great concert event\",\r\n        \"eventTicketTypes\": [\r\n            {\r\n                \"id\": 1,\r\n                \"price\": 20.0,\r\n                \"ticketsInStock\": 38\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"price\": 15.0,\r\n                \"ticketsInStock\": 94\r\n            }\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/events/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"eventName\": \"Testi patch 1\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/events/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events/{eventId} admin-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body indicates successful deletion\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Events Salesperson",
					"item": [
						{
							"name": "/events salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events/{eventId} salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events/search salesperson-success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events/search?=helsinki",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"search"
									],
									"query": [
										{
											"key": "",
											"value": "helsinki"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/events salesperson-Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 for forbidden access\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'Forbidden' for forbidden access\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"eventName\": \"Concert 1\",\r\n            \"eventDate\": \"2024-10-01T05:08:30.651+00:00\",\r\n            \"eventAddress\": \"Event Address 1\",\r\n            \"eventCity\": \"Helsinki\",\r\n            \"eventDescription\": \"A great concert event\",\r\n            \"eventTicketTypes\": [\r\n                {\r\n                    \"ticketType\": {\r\n                        \"id\": 1,\r\n                        \"name\": \"Aikuinen\"\r\n                    },\r\n                    \"price\": 10,\r\n                    \"ticketsInStock\": 40\r\n                }\r\n            ]\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/events",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events salesperson-Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 for forbidden access\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'Forbidden' for forbidden access\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"eventName\": \"Concert 1\",\r\n        \"eventDate\": \"2024-10-28T13:02:19.524+00:00\",\r\n        \"eventAddress\": \"Event Address 1\",\r\n        \"eventCity\": \"Helsinki\",\r\n        \"eventDescription\": \"A great concert event\",\r\n        \"eventTicketTypes\": [\r\n            {\r\n                \"id\": 1,\r\n                \"price\": 20.0,\r\n                \"ticketsInStock\": 38\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"price\": 15.0,\r\n                \"ticketsInStock\": 94\r\n            }\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/events/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events salesperson-Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 for forbidden access\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'Forbidden' for forbidden access\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"eventName\": \"Testi patch 1\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/events/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/events/{eventId} salesperson-Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403 for forbidden access\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes the message 'Forbidden' for forbidden access\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "salesperson",
											"type": "string"
										},
										{
											"key": "username",
											"value": "salesperson",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/events/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}